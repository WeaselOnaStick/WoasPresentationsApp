@page "/presenters"
@using System.Security.Cryptography
@inject ISessionStorageService storage
@inject NavigationManager navManager

@rendermode InteractiveWebAssembly

<h3>Hub</h3>

@foreach (var m in messages)
{
    <p>@m</p>
}

@if (hubCon != null && hubCon?.State != HubConnectionState.Connected)
{
    <p>Loading... (@(Enum.GetName(hubCon.State)))</p>
}
@if (hubCon != null && hubCon?.State == HubConnectionState.Connected)
{
    <button @onclick="SendGarbage"></button>
}

@code {
    private HubConnection hubCon;
    List<string> messages = new List<string>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;


        hubCon = new HubConnectionBuilder().WithUrl(navManager.ToAbsoluteUri("/presenters_hub")).Build();

        var myname = await storage.GetItemAsync<string>("username");
        if (myname == null) ReturnUnregistered();

        hubCon.On<string>("NewMessage", (m) =>
        {
            messages.Add(m);
            StateHasChanged();
        });

        hubCon.SendAsync("NewUserReport", myname);

        await hubCon.StartAsync();
        StateHasChanged();
    }

    void ReturnUnregistered(){
        navManager.NavigateTo("/");
    }

    public void SendGarbage(){
        hubCon.SendAsync("Announce", RandomNumberGenerator.GetString("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", RandomNumberGenerator.GetInt32(8, 17)));
        StateHasChanged();
    }


}
